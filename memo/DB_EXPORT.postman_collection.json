{
	"info": {
		"_postman_id": "a5e8ec77-bc5c-4eea-9d5d-cddf32e8bad4",
		"name": "DB_EXPORT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "SETUP",
			"item": [
				{
					"name": "Find User and store ID to env",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User already exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    var exist = false;",
									"    for (var index in jsonData.items) {",
									"        if (jsonData.items[index][\"email\"] == postman.getEnvironmentVariable(\"USER_EMAIL\")) {",
									"            postman.setEnvironmentVariable(\"USER_ID\", jsonData.items[index][\"id\"]);",
									"            exist = true;",
									"            postman.setNextRequest('Find Account and store ID to env');",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(exist).to.eql(true);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/sys/v1/users?limit=200",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "200"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find User By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/sys/v1/users/{{USER_ID}}",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"users",
								"{{USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create an user\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"USER_ID\", jsonData.id);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"{{USER_NAME}}\",\n  \"lastName\": \"{{USER_NAME}}\",\n  \"email\": \"{{USER_EMAIL}}\",\n  \"password\": \"{{USER_PASSWORD}}\",\n  \"birthday\": \"1987-02-09\",\n  \"language\": \"en\",\n  \"subEmail\": \"ducnn@nal.vn\"\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/sys/v1/users",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create an account\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"APP_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"displayName\": \"{{APP_NAME}}\"\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/apps",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suspend User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/sys/v1/users/{{USER_ID}}/suspend",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"users",
								"{{USER_ID}}",
								"suspend"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resume User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/sys/v1/users/{{USER_ID}}/resume",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"users",
								"{{USER_ID}}",
								"resume"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find DbNode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    ",
									"    var jsonData = pm.response.json();",
									"    var exist = false;",
									"    for (var index in jsonData.items) {",
									"        if (jsonData.items[index][\"name\"] == postman.getEnvironmentVariable(\"DB_NODE_NAME\")) {",
									"            postman.setEnvironmentVariable(\"DB_NODE_ID\", jsonData.items[index][\"id\"]);",
									"            exist = true;",
									"            postman.setNextRequest('Find Dbnodes and store ID to env');",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(exist).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/sys/v1/dbNodes",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"dbNodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create DB Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create an user\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"DB_NODE_ID\", jsonData.id);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{DB_NODE_NAME}}\"\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/sys/v1/dbNodes",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"dbNodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Account and store ID to env",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Account already exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    var exist = false;",
									"    for (var index in jsonData.items) {",
									"        if (jsonData.items[index][\"name\"] == postman.getEnvironmentVariable(\"ACCOUNT_NAME\")) {",
									"            postman.setEnvironmentVariable(\"ACCOUNT_ID\", jsonData.items[index][\"id\"]);",
									"            exist = true;",
									"            postman.setNextRequest('Authenticate User and store token to env');",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(exist).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/sys/v1/accounts?limit=200",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"accounts"
							],
							"query": [
								{
									"key": "limit",
									"value": "200"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/sys/v1/accounts/{{ACCOUNT_ID}}",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"accounts",
								"{{ACCOUNT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create an account\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"ACCOUNT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{ACCOUNT_NAME}}\",\n  \"displayName\": \"{{ACCOUNT_NAME}}\",\n  \"adminUser\": \"{{USER_ID}}\",\n  \"type\": \"PBTEST\",\n  \"dbNodeId\": \"{{DB_NODE_ID}}\"\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/sys/v1/accounts",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create an account\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"ACCOUNT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"displayName\": \"{{ACCOUNT_NAME}}\"\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/sys/v1/accounts/2",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"accounts",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate User and store token to env",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"ACCESS_TOKEN\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "apikey",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "hogehoge_{{USER_ID}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "fugafuga_{{USER_ID}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{USER_EMAIL}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{USER_PASSWORD}}",
									"type": "text"
								},
								{
									"key": "account",
									"value": "{{ACCOUNT_ID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/oauth2/token",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find App and store ID to env",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"App already exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    var exist = false;",
									"    for (var index in jsonData.items) {",
									"        if (jsonData.items[index][\"name\"] == postman.getEnvironmentVariable(\"APP_NAME\")) {",
									"            postman.setEnvironmentVariable(\"APP_ID\", jsonData.items[index][\"id\"]);",
									"            exist = true;",
									"            postman.setNextRequest('Find Customer DB and store Env');",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(exist).to.eql(true);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "x-authenticated-userid",
								"value": "account={{ACCOUNT_ID}};user={{USER_ID}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/v1/apps",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DB_EXPORT_DATA_PREPAIR",
			"item": [
				{
					"name": "V1.1 Create Customer DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create customer db\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"TEST_DB_ID\", jsonData[\"id\"]);",
									"    for (var index in jsonData[\"fields\"]) {",
									"        var fieldId = jsonData.fields[index][\"id\"];",
									"        var fieldName = jsonData.fields[index][\"name\"];",
									"        var fieldEnv = \"FIELD_\" + fieldName.toUpperCase() + \"_ID\";",
									"        postman.setEnvironmentVariable(fieldEnv, fieldId);",
									"    }",
									"    postman.setNextRequest('Insert Customer Records');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"TestDB_01\",\n  \"displayName\": \"Test DB 01\",\n  \"description\": \"This is Test DB 01\",\n  \"fields\": [\n    {\n      \"name\": \"id\",\n      \"displayName\": \"customer id\",\n      \"type\": \"text\",\n      \"required\": \"true\",\n      \"unique\": \"true\"\n    },\n      {\n      \"name\": \"name\",\n      \"displayName\": \"Customer name\",\n      \"type\": \"text\",\n      \"required\": \"true\"\n    },{\n      \"name\": \"avatar\",\n      \"displayName\": \"Customer avatar\",\n      \"type\": \"file\",\n      \"allowFileExtensions\": [\"jpg\", \"jpeg\", \"png\"],\n      \"required\": \"false\"\n    },{\n      \"name\": \"bla_text\",\n      \"displayName\": \"test bla text\",\n      \"type\": \"text\",\n      \"required\": \"true\"\n    },\n      {\n      \"name\": \"email\",\n      \"displayName\": \"Customer email\",\n      \"type\": \"email\",\n      \"required\": \"false\"\n    },\n      {\n      \"name\": \"phone\",\n      \"displayName\": \"Customer phone\",\n      \"type\": \"phone\",\n      \"required\": \"false\"\n    },\n      {\n      \"name\": \"workEmail\",\n      \"displayName\": \"Work email\",\n      \"type\": \"email\",\n      \"required\": \"false\"\n    }, {\n      \"name\": \"birth_day\",\n      \"displayName\": \"birthday\",\n      \"type\": \"date\"\n    }, {\n      \"name\": \"last_access\",\n      \"displayName\": \"last_access\",\n      \"type\": \"dateTime\"\n    }, {\n      \"name\": \"most_active_month\",\n      \"displayName\": \"most_active_month\",\n      \"type\": \"monthDay\"\n    }, {\n      \"name\": \"most_active_time\",\n      \"displayName\": \"most_active_time\",\n      \"type\": \"time\"\n    }, {\n      \"name\": \"married\",\n      \"displayName\": \"married\",\n      \"type\": \"select\",\n      \"options\": [\n        {\"id\": \"0\", \"label\": \"YES\"}, {\"id\": \"1\", \"label\": \"NO\"}\n      ]\n    }, {\n      \"name\": \"favorite_singers\",\n      \"displayName\": \"favorite_singers\",\n      \"type\": \"multiselect\",\n      \"options\": [\n        {\"id\": \"0\", \"label\": \"Michel\"}, {\"id\": \"1\", \"label\": \"Jewels\"}, {\"id\": \"2\", \"label\": \"EtonJohn\"}\n      ]\n    }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/dbs",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"dbs"
							]
						}
					},
					"response": []
				},
				{
					"name": "V1.1 Update Customer DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create customer db\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"TEST_DB_ID\", jsonData[\"id\"]);",
									"    for (var index in jsonData[\"fields\"]) {",
									"        var fieldId = jsonData.fields[index][\"id\"];",
									"        var fieldName = jsonData.fields[index][\"name\"];",
									"        var fieldEnv = \"FIELD_\" + fieldName.toUpperCase() + \"_ID\";",
									"        postman.setEnvironmentVariable(fieldEnv, fieldId);",
									"    }",
									"    postman.setNextRequest('Insert Customer Records');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"TestDB_01_Updated\",\n  \"displayName\": \"Test DB 01 Updated\",\n  \"description\": \"Test DB 01 Updated\"\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/dbs/{{DB_ID}}",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"dbs",
								"{{DB_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "V1.1 find all record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful insert customer records\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/dbs/{{DB_ID}}/records",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"dbs",
								"{{DB_ID}}",
								"records"
							]
						}
					},
					"response": []
				},
				{
					"name": "V1.1 Find Customer DB and store Env",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Customer DB already exists\", function () {",
									"    var responseData = pm.response.json();",
									"    var exist = false;",
									"    for (var i in responseData.items) {",
									"        if (responseData.items[i][\"name\"] == \"customer\") {",
									"            var jsonData = responseData.items[i];",
									"            postman.setEnvironmentVariable(\"TEST_DB_ID\", jsonData[\"id\"]);",
									"            postman.setEnvironmentVariable(\"DB_ID\", jsonData[\"id\"]);",
									"            for (var index in jsonData[\"fields\"]) {",
									"                var fieldId = jsonData.fields[index][\"id\"];",
									"                var fieldName = jsonData.fields[index][\"name\"];",
									"                var fieldEnv = \"FIELD_\" + fieldName.toUpperCase() + \"_ID\";",
									"                postman.setEnvironmentVariable(fieldEnv, fieldId);",
									"            }",
									"            exist = true;",
									"            postman.setNextRequest('Truncate Export Request DB');",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(exist).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"value": "{{APP_ROLE_NAME}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Authority",
								"value": "{{APP_AUTHORITY_NAME}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Authority",
								"value": "manage",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://{{HOST}}/v11/apps/{{APP_ID}}/dbs",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v11",
								"apps",
								"{{APP_ID}}",
								"dbs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create customer db\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"TEST_DB_ID\", jsonData[\"id\"]);",
									"    for (var index in jsonData[\"fields\"]) {",
									"        var fieldId = jsonData.fields[index][\"id\"];",
									"        var fieldName = jsonData.fields[index][\"name\"];",
									"        var fieldEnv = \"FIELD_\" + fieldName.toUpperCase() + \"_ID\";",
									"        postman.setEnvironmentVariable(fieldEnv, fieldId);",
									"    }",
									"    postman.setNextRequest('Insert Customer Records');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"app\": \"{{APP_ID}}\",\n  \"name\": \"CustomerDB\",\n  \"displayName\": \"CustomerDB\",\n  \"description\": \"This is database saving Customer Informations\",\n  \"fields\": [\n    {\n      \"name\": \"id\",\n      \"displayName\": \"customer id\",\n      \"type\": \"text\",\n      \"required\": \"true\",\n      \"unique\": \"true\"\n    },\n      {\n      \"name\": \"name\",\n      \"displayName\": \"Customer name\",\n      \"type\": \"text\",\n      \"required\": \"true\"\n    },{\n      \"name\": \"avatar\",\n      \"displayName\": \"Customer avatar\",\n      \"type\": \"file\",\n      \"allowFileExtensions\": [\"jpg\", \"jpeg\", \"png\"],\n      \"required\": \"false\"\n    },{\n      \"name\": \"bla_text\",\n      \"displayName\": \"test bla text\",\n      \"type\": \"text\",\n      \"required\": \"true\"\n    },\n      {\n      \"name\": \"email\",\n      \"displayName\": \"Customer email\",\n      \"type\": \"email\",\n      \"required\": \"true\"\n    },\n      {\n      \"name\": \"phone\",\n      \"displayName\": \"Customer phone\",\n      \"type\": \"phone\",\n      \"required\": \"false\"\n    },\n      {\n      \"name\": \"workEmail\",\n      \"displayName\": \"Work email\",\n      \"type\": \"email\",\n      \"required\": \"false\"\n    }, {\n      \"name\": \"birth_day\",\n      \"displayName\": \"birthday\",\n      \"type\": \"date\"\n    }, {\n      \"name\": \"last_access\",\n      \"displayName\": \"last_access\",\n      \"type\": \"dateTime\"\n    }, {\n      \"name\": \"most_active_month\",\n      \"displayName\": \"most_active_month\",\n      \"type\": \"monthDay\"\n    }, {\n      \"name\": \"most_active_time\",\n      \"displayName\": \"most_active_time\",\n      \"type\": \"time\"\n    }, {\n      \"name\": \"married\",\n      \"displayName\": \"married\",\n      \"type\": \"select\",\n      \"options\": [\n        {\"id\": \"0\", \"label\": \"YES\"}, {\"id\": \"1\", \"label\": \"NO\"}\n      ]\n    }, {\n      \"name\": \"favorite_singers\",\n      \"displayName\": \"favorite_singers\",\n      \"type\": \"multiselect\",\n      \"options\": [\n        {\"id\": \"0\", \"label\": \"Michel\"}, {\"id\": \"1\", \"label\": \"Jewels\"}, {\"id\": \"2\", \"label\": \"EtonJohn\"}\n      ]\n    }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Customer DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create customer db\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"TEST_DB_ID\", jsonData[\"id\"]);",
									"    for (var index in jsonData[\"fields\"]) {",
									"        var fieldId = jsonData.fields[index][\"id\"];",
									"        var fieldName = jsonData.fields[index][\"name\"];",
									"        var fieldEnv = \"FIELD_\" + fieldName.toUpperCase() + \"_ID\";",
									"        postman.setEnvironmentVariable(fieldEnv, fieldId);",
									"    }",
									"    postman.setNextRequest('Insert Customer Records');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"customer_backup\",\n  \"displayName\": \"Test DB - customer_backup\",\n  \"description\": \"Test DB - customer_backup\",\n  \"revision\": 3\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{DB_ID}}",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{DB_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{DB_ID}}?apps={{APP_ID}}&enableUsage=true",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{DB_ID}}"
							],
							"query": [
								{
									"key": "apps",
									"value": "{{APP_ID}}"
								},
								{
									"key": "enableUsage",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Customer DB and store Env",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Customer DB already exists\", function () {",
									"    var responseData = pm.response.json();",
									"    var exist = false;",
									"    for (var i in responseData.items) {",
									"        if (responseData.items[i][\"name\"] == \"customer\") {",
									"            var jsonData = responseData.items[i];",
									"            postman.setEnvironmentVariable(\"TEST_DB_ID\", jsonData[\"id\"]);",
									"            postman.setEnvironmentVariable(\"DB_ID\", jsonData[\"id\"]);",
									"            for (var index in jsonData[\"fields\"]) {",
									"                var fieldId = jsonData.fields[index][\"id\"];",
									"                var fieldName = jsonData.fields[index][\"name\"];",
									"                var fieldEnv = \"FIELD_\" + fieldName.toUpperCase() + \"_ID\";",
									"                postman.setEnvironmentVariable(fieldEnv, fieldId);",
									"            }",
									"            exist = true;",
									"            postman.setNextRequest('Truncate Export Request DB');",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(exist).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"value": "{{APP_ROLE_NAME}}",
								"type": "text"
							},
							{
								"key": "X-Spiral-App-Authority",
								"value": "{{APP_AUTHORITY_NAME}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/v1/dbs?apps={{APP_ID}}&enableUsage=true",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs"
							],
							"query": [
								{
									"key": "apps",
									"value": "{{APP_ID}}"
								},
								{
									"key": "enableUsage",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Truncate Customer DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.response.to.have.status(204)",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "x-authenticated-userid",
								"value": "account={{TEMP_ACCOUNT_ID}};user={{TEMP_USER_ID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ids\" : [\"1\",\"2\",\"3\",\"4\",\"5\"]\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records/bulk",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records",
								"bulk"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert Customer Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful insert customer records\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"value": "manageApp",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"records\": [\n    {\n      \"id\": \"1\",\n      \"name\": \"Customer1\",\n      \"bla_text\": \"bla bla\",\n      \"email\": \"cust1@gmail.com\",\n      \"phone\": \"+81355756601\",\n      \"workEmail\": \"cust1@work.com\",\n      \"birth_day\": \"1990-01-01\",\n      \"last_access\": \"2017-12-30T12:15:30Z\",\n      \"most_active_month\": \"12-30\",\n      \"most_active_time\": \"12:15:30\",\n      \"married\": \"0\",\n      \"favorite_singers\":[\"0\",\"1\"] \n    },\n    {\n      \"id\": \"2\",\n      \"name\": \"Customer2\",\n      \"bla_text\": \"bla bla\",\n      \"email\": \"cust2@gmail.com\",\n      \"phone\": \"+81355756602\",\n      \"workEmail\": \"cust2@work.com\",\n      \"birth_day\": \"1990-01-01\",\n      \"last_access\": \"2017-12-30T12:15:30Z\",\n      \"most_active_month\": \"12-30\",\n      \"most_active_time\": \"12:15:30\",\n      \"married\": \"0\",\n      \"favorite_singers\":[\"0\",\"1\"] \n    },\n    {\n      \"id\": \"3\",\n      \"name\": \"Customer3\",\n      \"bla_text\": \"bla bla\",\n      \"email\": \"cust3@gmail.com\",\n      \"phone\": \"+81355756603\",\n      \"workEmail\": \"cust3@work.com\",\n      \"birth_day\": \"1990-01-01\",\n      \"last_access\": \"2017-12-30T12:15:30Z\",\n      \"most_active_month\": \"12-30\",\n      \"most_active_time\": \"12:15:30\",\n      \"married\": \"0\",\n      \"favorite_singers\":[\"0\",\"1\"] \n    },\n    {\n      \"id\": \"4\",\n      \"name\": \"Customer4\",\n      \"bla_text\": \"bla bla\",\n      \"email\": \"cust4@gmail.com\",\n      \"phone\": \"+81355756604\",\n      \"workEmail\": \"cust4@work.com\",\n      \"birth_day\": \"1990-01-01\",\n      \"last_access\": \"2017-12-30T12:15:30Z\",\n      \"most_active_month\": \"12-30\",\n      \"most_active_time\": \"12:15:30\",\n      \"married\": \"0\",\n      \"favorite_singers\":[\"0\",\"1\"] \n    },\n    {\n      \"id\": \"5\",\n      \"name\": \"Customer5\",\n      \"bla_text\": \"bla bla\",\n      \"email\": \"cust5@gmail.com\",\n      \"phone\": \"+81355756605\",\n      \"workEmail\": \"cust5@work.com\",\n      \"birth_day\": \"1990-01-01\",\n      \"last_access\": \"2017-12-30T12:15:30Z\",\n      \"most_active_month\": \"12-30\",\n      \"most_active_time\": \"12:15:30\",\n      \"married\": \"0\",\n      \"favorite_singers\":[\"0\",\"1\"] \n    }]\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records/bulk",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records",
								"bulk"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Customer Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful insert customer records\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ids\": [1,2,3,4,5]\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records/bulk",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records",
								"bulk"
							]
						}
					},
					"response": []
				},
				{
					"name": "db node download file",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "x-authenticated-userid",
								"type": "text",
								"value": "account={{ACCOUNT_ID}};user={{USER_ID}}",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Role",
								"value": "manageApp",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records/download/1212/1",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records",
								"download",
								"1212",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create export request db node \u001c",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "x-authenticated-userid",
								"type": "text",
								"value": "account={{ACCOUNT_ID}};user={{USER_ID}}",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"fields\": [\n\t\t{\"format\": null, \"field\": \"_id\"}, \n\t\t{\"format\": null, \"field\": \"_createdAt\"}, \n\t\t{\"format\": null, \"field\": \"_updatedAt\"}, \n\t\t{\"format\": null, \"field\": \"2\"}\n\t]\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records/exports",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records",
								"exports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Truncate Export Request DB",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{TOOL_HOST}}/request/reset",
							"protocol": "http",
							"host": [
								"{{TOOL_HOST}}"
							],
							"path": [
								"request",
								"reset"
							]
						},
						"description": "http://{{TOOL_HOST}}/request/reset"
					},
					"response": []
				},
				{
					"name": "Insert a record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful insert customer records\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"value": "{{APP_ROLE_NAME}}",
								"type": "text"
							},
							{
								"key": "X-Spiral-App-Authority",
								"value": "{{APP_AUTHORITY_NAME}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"id\": \"1\",\n      \"name\": \"Customer1\",\n      \"bla_text\": \"bla bla\",\n      \"email\": \"cust1@gmail.com\",\n      \"phone\": \"+81355756601\",\n      \"workEmail\": \"cust1@work.com\",\n      \"birth_day\": \"1990-01-01\",\n      \"last_access\": \"2017-12-30T12:15:30Z\",\n      \"most_active_month\": \"12-30\",\n      \"most_active_time\": \"12:15:30\",\n      \"married\": \"0\",\n      \"favorite_singers\":[\"0\",\"1\"] \n\t\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful insert customer records\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"_owner\": {\n      \t\"dbId\":\"{{DB_ID}}\",\n      \t\"recordId\": \"1\"\n      },\n      \"id\": \"6\",\n      \"name\": \"Customer1\",\n      \"bla_text\": \"bla bla\",\n      \"email\": \"cust1@gmail.com\",\n      \"phone\": \"+81355756601\",\n      \"workEmail\": \"cust1@work.com\",\n      \"birth_day\": \"1990-01-01\",\n      \"last_access\": \"2017-12-30T12:15:30Z\",\n      \"most_active_month\": \"12-30\",\n      \"most_active_time\": \"12:15:30\",\n      \"married\": \"0\",\n      \"favorite_singers\":[\"0\",\"1\"] \n\t\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records/{{RECORD_ID}}",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records",
								"{{RECORD_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "find all record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful insert customer records\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful insert customer records\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"value": "manageApp",
								"type": "text"
							},
							{
								"key": "X-Spiral-App-Authority",
								"value": "use",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records/1",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE",
			"item": [
				{
					"name": "Check request status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"REQUEST_STATUS\", \"succeeded\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Request status is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(pm.environment.get(\"REQUEST_STATUS\"));",
									"    pm.expect(jsonData.errorMessage).to.eql(null);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{TOOL_HOST}}/request/{{EXPORT_REQUEST_ID}}",
							"protocol": "http",
							"host": [
								"{{TOOL_HOST}}"
							],
							"path": [
								"request",
								"{{EXPORT_REQUEST_ID}}"
							]
						},
						"description": "http://{{TOOL_HOST}}/request/1"
					},
					"response": []
				},
				{
					"name": "Check ceph object names",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{TOOL_HOST}}/radosgw/listObjects?accountId={{ACCOUNT_ID}}&requestId={{EXPORT_REQUEST_ID}}",
							"protocol": "http",
							"host": [
								"{{TOOL_HOST}}"
							],
							"path": [
								"radosgw",
								"listObjects"
							],
							"query": [
								{
									"key": "accountId",
									"value": "{{ACCOUNT_ID}}"
								},
								{
									"key": "requestId",
									"value": "{{EXPORT_REQUEST_ID}}"
								}
							]
						},
						"description": "http://{{TOOL_HOST}}/radosgw/listObjects?accountId=1&requestId=100"
					},
					"response": []
				},
				{
					"name": "Publish a message to activemq queue",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"setTimeout(function(){ ",
									"    console.log('sleep for ten min');",
									"    }, 5000);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"exportRequestId\": \"{{EXPORT_REQUEST_ID}}\",\n    \"accountId\": \"{{ACCOUNT_ID}}\",\n    \"userId\": \"{{USER_ID}}\",\n\t\"dbId\": \"{{TEST_DB_ID}}\",\n\t\"hasHeader\": true,\n\t\"where\": null,\n\t\"sort\": \"_id: desc\",\n\t\"fields\": [{\"metaField\": \"_id\", \"format\": null}, {\"fieldId\": \"1\", \"format\": \"text\"}]\n}"
						},
						"url": {
							"raw": "http://{{TOOL_HOST}}/messaging/task",
							"protocol": "http",
							"host": [
								"{{TOOL_HOST}}"
							],
							"path": [
								"messaging",
								"task"
							]
						},
						"description": "http://{{TOOL_HOST}}/messaging/task"
					},
					"response": []
				},
				{
					"name": "Check Line content",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{TOOL_HOST}}/radosgw/line?accountId={{ACCOUNT_ID}}&requestId={{EXPORT_REQUEST_ID}}&fileCount=1&lineNumber=2",
							"protocol": "http",
							"host": [
								"{{TOOL_HOST}}"
							],
							"path": [
								"radosgw",
								"line"
							],
							"query": [
								{
									"key": "accountId",
									"value": "{{ACCOUNT_ID}}"
								},
								{
									"key": "requestId",
									"value": "{{EXPORT_REQUEST_ID}}"
								},
								{
									"key": "fileCount",
									"value": "1"
								},
								{
									"key": "lineNumber",
									"value": "2"
								}
							]
						},
						"description": "http://{{TOOL_HOST}}/radosgw/line?accountId=1&requestId=1&fileCount=1&lineNumber=1"
					},
					"response": []
				},
				{
					"name": "Insert a request",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Successful insert request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"EXPORT_REQUEST_ID\", jsonData[\"id\"]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"accountId\": \"{{ACCOUNT_ID}}\",\n\t\"userId\": \"{{USER_ID}}\",\n\t\"dbId\": \"{{TEST_DB_ID}}\",\n\t\"hasHeader\": true,\n\t\"where\": null,\n\t\"sort\": \"_id: desc\",\n\t\"fields\": [\n\t\t{\"metaField\": \"_id\", \"format\": null}, \n\t\t{\"fieldId\": \"1\", \"format\": \"text\"}\n\t],\n\t\"status\": \"scheduled\"\n}"
						},
						"url": {
							"raw": "http://{{TOOL_HOST}}/request/",
							"protocol": "http",
							"host": [
								"{{TOOL_HOST}}"
							],
							"path": [
								"request",
								""
							]
						},
						"description": "http://{{TOOL_HOST}}/request/"
					},
					"response": []
				}
			]
		},
		{
			"name": "FileSizeDB",
			"item": [
				{
					"name": "Get file sizes of rados file",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{TOOL_HOST}}/radosgw/fileSize?accountId={{ACCOUNT_ID}}&requestId={{EXPORT_REQUEST_ID}}&fileCount=1",
							"protocol": "http",
							"host": [
								"{{TOOL_HOST}}"
							],
							"path": [
								"radosgw",
								"fileSize"
							],
							"query": [
								{
									"key": "accountId",
									"value": "{{ACCOUNT_ID}}"
								},
								{
									"key": "requestId",
									"value": "{{EXPORT_REQUEST_ID}}"
								},
								{
									"key": "fileCount",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get file sizes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{TOOL_HOST}}/request/{{EXPORT_REQUEST_ID}}/fileSizes",
							"protocol": "http",
							"host": [
								"{{TOOL_HOST}}"
							],
							"path": [
								"request",
								"{{EXPORT_REQUEST_ID}}",
								"fileSizes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish a message to activemq queue FileSize",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"setTimeout(function(){ ",
									"    console.log('sleep for ten min');",
									"    }, 5000);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"exportRequestId\": \"{{EXPORT_REQUEST_ID}}\",\n    \"accountId\": \"{{ACCOUNT_ID}}\",\n    \"userId\": \"{{USER_ID}}\",\n\t\"dbId\": \"{{TEST_DB_ID}}\",\n\t\"headerType\": \"fieldId\",\n\t\"hasHeader\": false,\n\t\"where\": null,\n\t\"sort\": \"_id: desc\",\n\t\"fields\": [\n\t\t{\"metaField\": \"_id\", \"format\": null}, \n\t\t{\"fieldId\": \"1000\", \"format\": \"text\"},\n\t\t{\"fieldId\": \"2\", \"format\": \"text\"},\n\t\t{\"fieldId\": \"3\", \"format\": \"email\"}\n\t]\n}"
						},
						"url": {
							"raw": "http://{{TOOL_HOST}}/messaging/task",
							"protocol": "http",
							"host": [
								"{{TOOL_HOST}}"
							],
							"path": [
								"messaging",
								"task"
							]
						},
						"description": "http://{{TOOL_HOST}}/messaging/task"
					},
					"response": []
				},
				{
					"name": "Insert FileSize Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Successful insert customer records\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"records\": [\n    {\n      \"id\": \"1\",\n      \"name\": \"Customer1\",\n      \"email\": \"cust1@gmail.com\"\n    },\n    {\n      \"id\": \"2\",\n      \"name\": \"Customer2\",\n      \"email\": \"cust2@gmail.com\"\n    },\n    {\n      \"id\": \"3\",\n      \"name\": \"Customer3\",\n      \"email\": \"cust3@gmail.com\"\n    },\n    {\n      \"id\": \"4\",\n      \"name\": \"Customer4\",\n      \"email\": \"cust4@gmail.com\"\n    },\n    {\n      \"id\": \"5\",\n      \"name\": \"Customer5\",\n      \"email\": \"cust5@gmail.com\"\n    }]\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records/bulk",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records",
								"bulk"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert a request Filesize",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Successful insert request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"EXPORT_REQUEST_ID\", jsonData[\"id\"]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"accountId\": \"{{ACCOUNT_ID}}\",\n\t\"userId\": \"{{USER_ID}}\",\n\t\"dbId\": \"{{TEST_DB_ID}}\",\n\t\"hasHeader\": false,\n\t\"headerType\": \"fieldId\",\n\t\"where\": \"@id = '0'\",\n\t\"sort\": \"_id: desc\",\n\t\"fields\": [\n\t\t{\"metaField\": \"_id\", \"format\": null}, \n\t\t{\"fieldId\": \"1000\", \"format\": \"text\"},\n\t\t{\"fieldId\": \"2\", \"format\": \"text\"},\n\t\t{\"fieldId\": \"3\", \"format\": \"email\"}\n\t],\n\t\"status\": \"scheduled\"\n}"
						},
						"url": {
							"raw": "http://{{TOOL_HOST}}/request/",
							"protocol": "http",
							"host": [
								"{{TOOL_HOST}}"
							],
							"path": [
								"request",
								""
							]
						},
						"description": "http://{{TOOL_HOST}}/request/"
					},
					"response": []
				},
				{
					"name": "Check request status Filesize",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"REQUEST_STATUS\", \"succeeded\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Request status is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(pm.environment.get(\"REQUEST_STATUS\"));",
									"    pm.expect(jsonData.errorMessage).to.eql(null);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{TOOL_HOST}}/request/{{EXPORT_REQUEST_ID}}",
							"protocol": "http",
							"host": [
								"{{TOOL_HOST}}"
							],
							"path": [
								"request",
								"{{EXPORT_REQUEST_ID}}"
							]
						},
						"description": "http://{{TOOL_HOST}}/request/1"
					},
					"response": []
				},
				{
					"name": "Create FileSize DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Successful create customer db\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"TEST_DB_ID\", jsonData[\"id\"]);",
									"    for (var index in jsonData[\"fields\"]) {",
									"        var fieldId = jsonData.fields[index][\"id\"];",
									"        var fieldName = jsonData.fields[index][\"name\"];",
									"        var fieldEnv = \"FIELD_\" + fieldName.toUpperCase() + \"_ID\";",
									"        postman.setEnvironmentVariable(fieldEnv, fieldId);",
									"    }",
									"    postman.setNextRequest('Insert Customer Records');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"app\": \"{{APP_ID}}\",\n  \"name\": \"customer\",\n  \"displayName\": \"Test DB - customer\",\n  \"description\": \"Test DB - customer\",\n  \"fields\": [\n    {\n      \"name\": \"id\",\n      \"displayName\": \"customer id\",\n      \"type\": \"text\",\n      \"required\": \"true\",\n      \"unique\": \"true\"\n    },\n      {\n      \"name\": \"name\",\n      \"displayName\": \"Customer name\",\n      \"type\": \"text\",\n      \"required\": \"true\"\n    },\n      {\n      \"name\": \"email\",\n      \"displayName\": \"Customer email\",\n      \"type\": \"email\",\n      \"required\": \"true\"\n    }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BATCH",
			"item": [
				{
					"name": "Spiral-service - cancel a batchInsert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful cancel batch insert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/nguyenngocduc/Desktop/sample.csv",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records/batchInserts/{{BATCH_INSERT_ID}}/cancel",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records",
								"batchInserts",
								"{{BATCH_INSERT_ID}}",
								"cancel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Spiral-service - Insert a batchDeletes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"BATCH_DELETE_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"where\": \"@name = 'ducnn'\"\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records/batchDeletes",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records",
								"batchDeletes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Spiral-service - Insert a batchInsert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"BATCH_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/nguyenngocduc/Desktop/sample.csv"
								},
								{
									"key": "onError",
									"value": "rollback",
									"type": "text"
								},
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records/batchInserts",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records",
								"batchInserts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Spiral-service - list a batchInsert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "fileName",
									"value": "spiral-service",
									"type": "text",
									"disabled": true
								},
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records/batchInserts",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records",
								"batchInserts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Spiral-service - cancel a batchDelete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful insert customer records\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/nguyenngocduc/Desktop/sample.csv",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records/batchDeletes/{{BATCH_INSERT_ID}}/cancel",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records",
								"batchDeletes",
								"{{BATCH_INSERT_ID}}",
								"cancel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Spiral-service - list a batch delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "fileName",
									"value": "spiral-service",
									"type": "text",
									"disabled": true
								},
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records/batchDeletes",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records",
								"batchDeletes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "FILE_SERVICE",
			"item": [
				{
					"name": "Put profile icon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"FILE_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/nguyenngocduc/Desktop/response.png"
							}
						},
						"url": {
							"raw": "http://{{HOST}}/v1/profile/icon",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"profile",
								"icon"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"FILE_KEY\", jsonData.fileKey);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/nguyenngocduc/Desktop/Screen Shot 2020-04-23 at 10.48.30 AM.png",
									"disabled": true
								},
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/{{FIELD_ID}}/files/{{FILE_KEY}}",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"{{FIELD_ID}}",
								"files",
								"{{FILE_KEY}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get profile icon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"FILE_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/profile/icon",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"profile",
								"icon"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put app icon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"FILE_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/nguyenngocduc/Desktop/response.png"
							}
						},
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/icon",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"icon"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get \u001dapp icon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"FILE_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/icon",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"icon"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put account icon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"FILE_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/nguyenngocduc/Desktop/response.png"
							}
						},
						"url": {
							"raw": "http://{{HOST}}/v1/account/icon",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"account",
								"icon"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"FILE_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/{{FIELD_ID}}/files/{{FILE_KEY}}",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"{{FIELD_ID}}",
								"files",
								"{{FILE_KEY}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"FILE_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/{{FIELD_ID}}/files/{{FILE_KEY}}/download",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"{{FIELD_ID}}",
								"files",
								"{{FILE_KEY}}",
								"download"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"FILE_KEY\", jsonData.fileKey);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/nguyenngocduc/Desktop/Screen Shot 2020-04-23 at 10.48.30 AM.png"
								},
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/{{FIELD_ID}}/files",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"{{FIELD_ID}}",
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get account icon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"FILE_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "manageApp"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "use"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/account/icon",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"account",
								"icon"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AM",
			"item": [
				{
					"name": "Delete App Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"App already exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    var exist = false;",
									"    for (var index in jsonData.items) {",
									"        if (jsonData.items[index][\"name\"] == postman.getEnvironmentVariable(\"APP_ROLE_NAME\")) {",
									"            postman.setEnvironmentVariable(\"APP_ROLE_ID\", jsonData.items[index][\"id\"]);",
									"            exist = true;",
									"            postman.setNextRequest('Find Customer DB and store Env');",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(exist).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "x-authenticated-userid",
								"value": "account={{ACCOUNT_ID}};user={{USER_ID}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/roles/4",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"roles",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find all operator app",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "x-authenticated-userid",
								"value": "account={{ACCOUNT_ID}};user={{USER_ID}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/v1/allUsers/apps",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"allUsers",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find all operator app manage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "x-authenticated-userid",
								"value": "account={{ACCOUNT_ID}};user={{USER_ID}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/v1/allUsers/managedApps",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"allUsers",
								"managedApps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create an account\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"APP_GROUP_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"displayName\": \"{{APP_NAME}}\"\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/groups",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Spiral-service - Get record delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"BATCH_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records/{{RECORD_ID}}/canDelete",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records",
								"{{RECORD_ID}}",
								"canDelete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create operator manage app",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create an account\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"APP_ROLE_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"appId\": \"{{APP_ID}}\",\n  \"isAdmin\": true\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/allUsers/managedApps",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"allUsers",
								"managedApps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update App groups membership",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"addMemberships\": [\"{{USER_ID}}\"]\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/groups/{{APP_GROUP_ID}}/memberships",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"groups",
								"{{APP_GROUP_ID}}",
								"memberships"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create operator app and operator app role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create an account\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"APP_ROLE_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"appId\": \"{{APP_ID}}\",\n  \"fullAccess\": true,\n  \"appRoleIds\": [\"{{APP_ROLE_ID}}\"]\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/allUsers/apps",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"allUsers",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update\u001d operator app and operator app role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create an account\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"APP_ROLE_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullAccess\": false,\n  \"appRoleIds\": [\"{{APP_ROLE_ID}}\"]\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/allUsers/apps/{{APP_ID}}",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"allUsers",
								"apps",
								"{{APP_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update dbPermissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "x-authenticated-userid",
								"value": "account={{ACCOUNT_ID}};user={{USER_ID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"canAccess\": true,\n  \"canInsertRecord\": true,\n  \"canExportRecord\": true,\n  \"canBatchInsertRecord\": true,\n  \"canBatchUpdateRecord\": true,\n  \"canBatchDeleteRecord\": true,\n  \"canEditExpress\": true,\n  \"canDeliveryExpress\": true,\n  \"canTestExpress\": true,\n  \"canViewExpressLog\": true,\n  \"allRecordsPermission\": {\n    \"read\": true,\n    \"update\": true,\n    \"delete\": false\n  },\n  \"recordPermissions\": [\n  \t{\n\t\t\"conditions\" : [{\n\t\t\t\"field\" : \"name\",\n\t\t\t\"operator\" : \"contains\",\n\t\t\t\"value1\": \"TestName\"\n\t\t}],\n\t\t\"read\" :true,\n\t\t\"update\" :true, \n\t\t\"delete\" :false\n\t},\n\t{\n\t\t\"conditions\" : [{\n\t\t\t\"field\" : \"id\",\n\t\t\t\"operator\" : \"gt_and_lt\",\n\t\t\t\"value1\": \"1\",\n\t\t\t\"value2\": \"20\"\n\t\t}],\n\t\t\"read\" :true,\n\t\t\"update\" :true, \n\t\t\"delete\" :false\n\t}\n\t],\n  \"fieldPermissions\": {\n    \"last_access\": {\n      \"read\": true,\n      \"update\": true,\n      \"insert\": true\n    },\n    \"workEmail\": {\n      \"read\": true,\n      \"update\": true,\n      \"insert\": true\n    },\n    \"avatar\": {\n      \"read\": true,\n      \"update\": true,\n      \"insert\": true\n    },\n    \"most_active_time\": {\n      \"read\": true,\n      \"update\": true,\n      \"insert\": true\n    },\n    \"most_active_month\": {\n      \"read\": true,\n      \"update\": true,\n      \"insert\": true\n    },\n    \"birth_day\": {\n      \"read\": true,\n      \"update\": true,\n      \"insert\": true\n    },\n    \"favorite_singers\": {\n      \"read\": true,\n      \"update\": true,\n      \"insert\": true\n    },\n    \"phone\": {\n      \"read\": true,\n      \"update\": true,\n      \"insert\": true\n    },\n    \"name\": {\n      \"read\": true,\n      \"update\": true,\n      \"insert\": true\n    },\n    \"id\": {\n      \"read\": true,\n      \"update\": true,\n      \"insert\": true\n    },\n    \"married\": {\n      \"read\": true,\n      \"update\": true,\n      \"insert\": true\n    },\n    \"bla_text\": {\n      \"read\": true,\n      \"update\": true,\n      \"insert\": true\n    },\n    \"email\": {\n      \"read\": true,\n      \"update\": true,\n      \"insert\": true\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/roles/{{APP_ROLE_ID}}/dbPermissions/{{DB_ID}}",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"roles",
								"{{APP_ROLE_ID}}",
								"dbPermissions",
								"{{DB_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "LOG_SERVICE",
			"item": [
				{
					"name": "Get accessHistories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"BATCH_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/accessHistories",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"accessHistories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get download list emailLogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/emailLogs/download/list/1/1",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"emailLogs",
								"download",
								"list",
								"1",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get download clickCount emailLogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/emailLogs/download/clickCount/1/1",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"emailLogs",
								"download",
								"clickCount",
								"1",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "create log service exports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"RECORD_ID\", jsonData.item._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"emailJobId\": 9,\n    \"fileExtension\": \"txt\"\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/emailLogs/exports",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"emailLogs",
								"exports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get download openCount emailLogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/emailLogs/download/openCount/1/1",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"emailLogs",
								"download",
								"openCount",
								"1",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get emailLogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/emailLogs?emailJobIds=1",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"emailLogs"
							],
							"query": [
								{
									"key": "emailJobIds",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get email jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"BATCH_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/emailJobs",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"emailJobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get download info emailLogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"BATCH_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/emailLogs/download/info/1",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"emailLogs",
								"download",
								"info",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SPIRAL_SERVICE",
			"item": [
				{
					"name": "Get App Manage Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"BATCH_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/manageGroups",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"manageGroups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Group App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"BATCH_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/groups/{{APP_GROUP_ID}}/apps",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"groups",
								"{{APP_GROUP_ID}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Authority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"BATCH_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/groups/{{APP_GROUP_ID}}/apps",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"groups",
								"{{APP_GROUP_ID}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Group App Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"BATCH_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/groups/{{APP_GROUP_ID}}/apps",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"groups",
								"{{APP_GROUP_ID}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"BATCH_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records/9",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "create record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"RECORD_ID\", jsonData.item._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"id\": \"7\",\n      \"name\": \"Customer7\",\n      \"bla_text\": \"bla bla\",\n      \"email\": \"cust7@gmail.com\",\n      \"phone\": \"+81355756601\",\n      \"workEmail\": \"cust7@work.com\",\n      \"birth_day\": \"1990-01-01\",\n      \"last_access\": \"2017-12-30T12:15:30Z\",\n      \"most_active_month\": \"12-30\",\n      \"most_active_time\": \"12:15:30\",\n      \"married\": \"0\",\n      \"favorite_singers\":[\"0\",\"1\"] \n\t\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get DBS Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"BATCH_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App Manage Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"BATCH_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"groupId\": \"{{APP_GROUP_ID}}\",\n\t\"isAdmin\": true\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/manageGroups",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"manageGroups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"BATCH_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"groupId\": \"{{APP_GROUP_ID}}\",\n\t\"fullAccess\": true,\n\t\"appRoleIds\": [\"{{APP_ROLE_ID}}\"]\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/groups",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"BATCH_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"name\": \"Customer70\",\n      \"bla_text\": \"bla bla\",\n      \"email\": \"cust7@gmail.com\",\n      \"phone\": \"+81355756601\",\n      \"workEmail\": \"cust7@work.com\",\n      \"birth_day\": \"1990-01-01\",\n      \"last_access\": \"2017-12-30T12:15:30Z\",\n      \"most_active_month\": \"12-30\",\n      \"most_active_time\": \"12:15:30\",\n      \"married\": \"0\",\n      \"favorite_singers\":[\"0\",\"1\"] \n\t\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/dbs/{{TEST_DB_ID}}/records/9",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get App Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"BATCH_INSERT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "fileSize",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/groups",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get App groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create an account\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"APP_GROUP_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"displayName\": \"{{APP_NAME}}\"\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/groups/{{APP_GROUP_ID}}/apps",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"groups",
								"{{APP_GROUP_ID}}",
								"apps"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "MAIL_SERVICE",
			"item": [
				{
					"name": "V1.1 Find mail express",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"RECORD_ID\", jsonData.item._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/dbs/{{DB_ID}}/express/email/1",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"dbs",
								"{{DB_ID}}",
								"express",
								"email",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "V1.0 View DB Setting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "APP_ROLE_NAME_02",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/v1/express/email/1",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"express",
								"email",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "V1.1 Find list mail express",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"RECORD_ID\", jsonData.item._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/dbs/{{DB_ID}}/express/email?statusCategory=settingStatus&sort=updatedAt:desc&limit=20&offset=0",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"dbs",
								"{{DB_ID}}",
								"express",
								"email"
							],
							"query": [
								{
									"key": "statusCategory",
									"value": "settingStatus"
								},
								{
									"key": "sort",
									"value": "updatedAt:desc"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "V1.1 create mail express",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"RECORD_ID\", jsonData.item._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to\": {\n        \"field\": \"5\"\n    },\n    \"from\": {\n        \"emailLocalPart\": \"example.com\",\n        \"emailFromDomainId\": \"6\"\n    },\n    \"subject\": {\n        \"content\": \"メール件名テスト {{@customer.name}}\"\n    },\n    \"plainBody\": {\n        \"content\": \"test {{@customer.name}}\"\n    },\n\t\"excludeErrorCount\": \"1\",\n\t\"timing\": \"scheduled\",\n\t\"scheduleDate\": \"2021-01-20T03:55:00Z\",\n\t\"status\": \"setting\"\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/dbs/{{DB_ID}}/express/email",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"dbs",
								"{{DB_ID}}",
								"express",
								"email"
							]
						}
					},
					"response": []
				},
				{
					"name": "V1.1 Update mail express",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"RECORD_ID\", jsonData.item._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"to\": {\n\t\t\"field\": \"5\"\n\t},\n    \"from\": {\n        \"emailLocalPart\": \"example.com\",\n        \"emailFromDomainId\": \"6\"\n    },\n\t\"subject\": {\n\t\t\"content\": \"メール件名テスト{{@customer.name}}↵{{@customer._id}}↵{{@customer._createdAt}}↵{{@customer._updatedAt}}\"\n\t},\n\t\"plainBody\": {\n\t\t\"content\": \"{{@customer.name}}↵{{@customer._id}}↵{{@customer._createdAt}}↵{{@customer._updatedAt}}\"\n\t},\n\t\"excludeErrorCount\": \"1\",\n\t\"timing\": \"scheduled\",\n\t\"scheduleDate\": \"2021-05-20T03:55:00Z\",\n\t\"status\": \"setting\"\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/dbs/{{DB_ID}}/express/email/33",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"dbs",
								"{{DB_ID}}",
								"express",
								"email",
								"33"
							]
						}
					},
					"response": []
				},
				{
					"name": "V1.1 DELETE mail express",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"RECORD_ID\", jsonData.item._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/v1/apps/{{APP_ID}}/dbs/{{DB_ID}}/express/email/13",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"apps",
								"{{APP_ID}}",
								"dbs",
								"{{DB_ID}}",
								"express",
								"email",
								"13"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE mail express",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"RECORD_ID\", jsonData.item._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/v1/express/email/1",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"express",
								"email",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "create mail express",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"RECORD_ID\", jsonData.item._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"app\": \"{{APP_ID}}\",\n    \"to\": {\n        \"db\": \"{{DB_ID}}\",\n        \"field\": \"5\"\n    },\n    \"from\": {\n        \"emailLocalPart\": \"nal.vn\",\n        \"emailFromDomainId\": \"{{EMAIL_FROM_DOMAIN_ID}}\"\n    },\n    \"subject\": {\n        \"content\": \"メール件名テスト {{@customer.name}}\"\n    },\n    \"plainBody\": {\n        \"content\": \"test {{@customer.name}}\"\n    },\n\t\"excludeErrorCount\": \"1\",\n\t\"timing\": \"scheduled\",\n\t\"scheduleDate\": \"2021-01-20T03:55:00Z\",\n\t\"status\": \"setting\"\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/express/email",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"express",
								"email"
							]
						}
					},
					"response": []
				},
				{
					"name": "create singleRecordMailActions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"SING_MAIL_ACTION_ID\", jsonData.id);",
									"    postman.setEnvironmentVariable(\"SING_MAIL_ACTION_BODY_ID\", jsonData.bodies[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"displayName\":\"aidamcuoianh4\",\n   \"name\":\"DucNN4\",\n   \"status\":\"setting\",\n   \"dbId\":\"{{TEST_DB_ID}}\",\n   \"appId\":\"{{APP_ID}}\",\n   \"to\":{\n      \"dbInfo\":{\n         \"fieldId\":\"5\"\n      }\n   },\n   \"excludeErrorCount\":1,\n   \"from\":{\n      \"displayName\":\"admin\",\n      \"emailLocalPart\":\"admin\",\n      \"emailFromDomainId\":\"16\"\n   },\n   \"replyTo\":\"ducnn@nal.vn\",\n   \"subject\":{\n      \"content\":\"test action 001\"\n   },\n   \"bodies\":[\n      {\n         \"contentType\":\"plain\",\n         \"content\":\"{{@customer.name}}\\n{{@customer._id}}\\n{{@customer._createdAt}}\\n{{@customer._updatedAt}}\"\n      }\n   ]\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/singleRecordMailActions",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"singleRecordMailActions"
							]
						}
					},
					"response": []
				},
				{
					"name": "create multiRecordMailActions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"MUL_MAIL_ACTION_ID\", jsonData.id);",
									"    postman.setEnvironmentVariable(\"MUL_MAIL_ACTION_BODY_ID\", jsonData.bodies[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"displayName\":\"aidamcuoianh7\",\n   \"name\":\"DucNN7\",\n   \"status\":\"setting\",\n   \"dbId\":\"{{TEST_DB_ID}}\",\n   \"appId\":\"{{APP_ID}}\",\n   \"to\":{\n      \"dbInfo\":{\n         \"fieldId\":\"5\"\n      }\n   },\n   \"excludeErrorCount\":1,\n   \"from\":{\n      \"displayName\":\"admin\",\n      \"emailLocalPart\":\"admin\",\n      \"emailFromDomainId\":\"16\"\n   },\n   \"replyTo\":\"ducnn@nal.vn\",\n   \"subject\":{\n      \"content\":\"test action 001 {{@customer._id|}}\"\n   },\n   \"bodies\":[\n      {\n         \"contentType\":\"plain\",\n         \"content\":\"{{@customer.name}}\\n{{@customer._id}}\\n{{@customer._createdAt}}\\n{{@customer._updatedAt}}\"\n      }\n   ]\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/multiRecordMailActions",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"multiRecordMailActions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update singleRecordMailActions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"RECORD_ID\", jsonData.item._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"to\":{\n      \"dbInfo\":{\n         \"fieldId\":\"5\",\n         \"where\":null,\n         \"simpleWhere\":null,\n         \"triggeredDateWhere\":null\n      }\n   },\n   \"excludeErrorCount\":1,\n   \"from\":{\n      \"displayName\":\"admin\",\n      \"emailLocalPart\":\"admin\",\n      \"emailFromDomainId\":\"16\"\n   },\n   \"replyTo\":\"ducnn@nal.vn\",\n   \"subject\":{\n      \"content\":\"test action 001\"\n   },\n   \"updateBodies\":[\n      {\n         \"id\":\"{{SING_MAIL_ACTION_BODY_ID}}\",\n         \"contentType\":\"plain\",\n         \"content\":\"{{@customer.name|}}\\n{{@customer._id|}}\\n{{@customer._createdAt|}}\\n{{@customer._updatedAt|}}\"\n      }\n   ],\n   \"exists\":null\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/singleRecordMailActions/{{SING_MAIL_ACTION_ID}}",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"singleRecordMailActions",
								"{{SING_MAIL_ACTION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update multiRecordMailActions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"RECORD_ID\", jsonData.item._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"to\":{\n      \"dbInfo\":{\n         \"fieldId\":\"5\",\n         \"where\":null,\n         \"simpleWhere\":null,\n         \"triggeredDateWhere\":null\n      }\n   },\n   \"excludeErrorCount\":1,\n   \"from\":{\n      \"displayName\":\"admin\",\n      \"emailLocalPart\":\"admin\",\n      \"emailFromDomainId\":\"16\"\n   },\n   \"replyTo\":\"ducnn@nal.vn\",\n   \"subject\":{\n      \"content\":\"test action 001\"\n   },\n   \"updateBodies\":[\n      {\n         \"id\":\"{{MAIL_ACTION_BODY_ID}}\",\n         \"contentType\":\"plain\",\n         \"content\":\"{{@customer.name|}}\\n{{@customer._id|}}\\n{{@customer._createdAt|}}\\n{{@customer._updatedAt|}}\"\n      }\n   ],\n   \"exists\":null\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/multiRecordMailActions/{{MAIL_ACTION_ID}}",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"multiRecordMailActions",
								"{{MAIL_ACTION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update mail express",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"RECORD_ID\", jsonData.item._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"to\": {\n\t\t\"db\": \"2\",\n\t\t\"field\": \"1\"\n\t},\n    \"from\": {\n        \"emailLocalPart\": \"nal.vn\",\n        \"emailFromDomainId\": \"3\"\n    },\n\t\"subject\": {\n\t\t\"content\": \"ong tay\"\n\t},\n\t\"plainBody\": {\n\t\t\"content\": \"ong tay text\"\n\t},\n\t\"excludeErrorCount\": \"1\",\n\t\"timing\": \"scheduled\",\n\t\"scheduleDate\": \"2019-05-20T03:55:00Z\",\n\t\"status\": \"setting\"\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/express/email/45",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"express",
								"email",
								"45"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find list mail express",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"RECORD_ID\", jsonData.item._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/v1/express/email?dbs={{DB_ID}}&statusCategory=settingStatus&sort=updatedAt:desc&limit=20&offset=0",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"express",
								"email"
							],
							"query": [
								{
									"key": "dbs",
									"value": "{{DB_ID}}"
								},
								{
									"key": "statusCategory",
									"value": "settingStatus"
								},
								{
									"key": "sort",
									"value": "updatedAt:desc"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create emailFromDomains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"domain\": \"nal.vn\",\n    \"localPart\": \"localhost\"\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/emailFromDomains",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"emailFromDomains"
							]
						}
					},
					"response": []
				},
				{
					"name": "create fixedMailActions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"FIX_MAIL_ACTION_ID\", jsonData.id);",
									"    postman.setEnvironmentVariable(\"FIX_MAIL_ACTION_BODY_ID\", jsonData.bodies[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"displayName\":\"aidamcuoianh5\",\n   \"name\":\"DucNN5\",\n   \"status\":\"setting\",\n   \"dbId\":\"{{TEST_DB_ID}}\",\n   \"appId\":\"{{APP_ID}}\",\n   \"to\":{\n      \"dbInfo\":{\n         \"fieldId\":\"5\"\n      },\n      \"fixedTo\":[{\n         \"where\":null,\n         \"simpleWhere\":null,\n         \"emails\": [\"admin@example.com\"]\n      }]\n   },\n   \"excludeErrorCount\":1,\n   \"from\":{\n      \"displayName\":\"admin\",\n      \"emailLocalPart\":\"admin\",\n      \"emailFromDomainId\":\"{{EMAIL_FROM_DOMAIN_ID}}\"\n   },\n   \"replyTo\":\"ducnn@nal.vn\",\n   \"subject\":{\n      \"content\":\"test action 001\"\n   },\n   \"bodies\":[\n      {\n         \"contentType\":\"plain\",\n         \"content\":\"{{@customer_backup.name}}\\n{{@customer_backup._id}}\"\n      }\n   ]\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/fixedMailActions",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"fixedMailActions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update fixedMailActions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // postman.setEnvironmentVariable(\"RECORD_ID\", jsonData.item._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"excludeErrorCount\":1,\n   \"from\":{\n      \"displayName\":\"admin\",\n      \"emailLocalPart\":\"admin\",\n      \"emailFromDomainId\":\"{{EMAIL_FROM_DOMAIN_ID}}\"\n   },\n   \"replyTo\":\"ducnn@nal.vn\",\n   \"subject\":{\n      \"content\":\"test action 001 {{@customer._id|}}\"\n   },\n   \"updateBodies\":[\n      {\n         \"id\":\"{{FIX_MAIL_ACTION_BODY_ID}}\",\n         \"contentType\":\"plain\",\n         \"content\":\"{{@customer.name}}\\n{{@customer._id}}\\n{{@customer._createdAt}}\\n{{@customer._updatedAt}}\"\n      }\n   ],\n   \"exists\":null\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/v1/fixedMailActions/{{FIX_MAIL_ACTION_ID}}",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"fixedMailActions",
								"{{FIX_MAIL_ACTION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get emailFromDomains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful create batchInsert\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}"
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{HOST}}/v1/emailFromDomains",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v1",
								"emailFromDomains"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ACCOUNT_SERVICE",
			"item": [
				{
					"name": "sys",
					"item": [
						{
							"name": "Find account ipRestrictionApi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}",
										"disabled": true
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}",
										"disabled": true
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}",
										"disabled": true
									},
									{
										"key": "apikey",
										"type": "text",
										"value": "{{SPIRALG_SYS_KEY}}"
									}
								],
								"url": {
									"raw": "http://{{HOST}}/sys/v1/accounts/{{ACCOUNT_ID}}/ipRestrictionApi",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"sys",
										"v1",
										"accounts",
										"{{ACCOUNT_ID}}",
										"ipRestrictionApi"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find mfa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}",
										"disabled": true
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}",
										"disabled": true
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}",
										"disabled": true
									},
									{
										"key": "apikey",
										"value": "{{SPIRALG_SYS_KEY}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{HOST}}/sys/v1/mfa",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"sys",
										"v1",
										"mfa"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create mfa for app",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}",
										"disabled": true
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}",
										"disabled": true
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}",
										"disabled": true
									},
									{
										"key": "apikey",
										"type": "text",
										"value": "{{SPIRALG_SYS_KEY}}"
									}
								],
								"url": {
									"raw": "http://{{HOST}}/sys/v1/mfa/{{USER_ID}}/app/seed",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"sys",
										"v1",
										"mfa",
										"{{USER_ID}}",
										"app",
										"seed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create mfa mail code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}",
										"disabled": true
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}",
										"disabled": true
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}",
										"disabled": true
									},
									{
										"key": "apikey",
										"type": "text",
										"value": "{{SPIRALG_SYS_KEY}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestType\": \"LOGIN\",\n\t\"mailType\": \"MAIN\"\n}"
								},
								"url": {
									"raw": "http://{{HOST}}/sys/v1/mfa/{{USER_ID}}/mail/code",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"sys",
										"v1",
										"mfa",
										"{{USER_ID}}",
										"mail",
										"code"
									]
								}
							},
							"response": []
						},
						{
							"name": "mfa mail change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}",
										"disabled": true
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}",
										"disabled": true
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}",
										"disabled": true
									},
									{
										"key": "apikey",
										"type": "text",
										"value": "{{SPIRALG_SYS_KEY}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"code\": \"W2bExn6uAD46kiq9R6hnPvo99Gz6KzTN\"\n}"
								},
								"url": {
									"raw": "http://{{HOST}}/sys/v1/mfa/{{USER_ID}}/mail/change",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"sys",
										"v1",
										"mfa",
										"{{USER_ID}}",
										"mail",
										"change"
									]
								}
							},
							"response": []
						},
						{
							"name": "enable mfa for mail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}",
										"disabled": true
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}",
										"disabled": true
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}",
										"disabled": true
									},
									{
										"key": "apikey",
										"type": "text",
										"value": "{{SPIRALG_SYS_KEY}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"setting\": \"mail\",\n\t\"code\": \"550621\"\n}"
								},
								"url": {
									"raw": "http://{{HOST}}/sys/v1/mfa/{{USER_ID}}/enable",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"sys",
										"v1",
										"mfa",
										"{{USER_ID}}",
										"enable"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update requestLimit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}",
										"disabled": true
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}",
										"disabled": true
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}",
										"disabled": true
									},
									{
										"key": "apikey",
										"type": "text",
										"value": "{{SPIRALG_SYS_KEY}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"accountId\": \"{{ACCOUNT_ID}}\",\n\t\"perMonth\": 0,\n\t\"perDay\": 0,\n\t\"perHour\": 0,\n\t\"perMinute\": 0,\n\t\"perSecond\": 0\n}"
								},
								"url": {
									"raw": "http://{{HOST}}/sys/v1/requestLimits/{{ACCOUNT_ID}}",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"sys",
										"v1",
										"requestLimits",
										"{{ACCOUNT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "enable mfa for app",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}",
										"disabled": true
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}",
										"disabled": true
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}",
										"disabled": true
									},
									{
										"key": "apikey",
										"type": "text",
										"value": "{{SPIRALG_SYS_KEY}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"setting\": \"app\",\n\t\"code\": \"784851\"\n}"
								},
								"url": {
									"raw": "http://{{HOST}}/sys/v1/mfa/{{USER_ID}}/enable",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"sys",
										"v1",
										"mfa",
										"{{USER_ID}}",
										"enable"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth mfa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}",
										"disabled": true
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}",
										"disabled": true
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}",
										"disabled": true
									},
									{
										"key": "apikey",
										"type": "text",
										"value": "{{SPIRALG_SYS_KEY}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"setting\": \"mail\",\n\t\"code\": \"621qiDQO3eXDQF067Zf7cwHj1r95fPTe\"\n}"
								},
								"url": {
									"raw": "http://{{HOST}}/sys/v1/mfa/{{USER_ID}}/auth",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"sys",
										"v1",
										"mfa",
										"{{USER_ID}}",
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "user",
					"item": [
						{
							"name": "create bot apiKeys",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful create ip groups\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setEnvironmentVariable(\"BOT_API_KEYS_ID\", jsonData.id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}"
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"displayName\": \"apiKey1\",\n\t\"scopes\": [\"ALL\"]\n}"
								},
								"url": {
									"raw": "http://{{HOST}}/v1/bots/{{BOT_ID}}/apiKeys",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"v1",
										"bots",
										"{{BOT_ID}}",
										"apiKeys"
									]
								}
							},
							"response": []
						},
						{
							"name": "create apiKeys",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful create ip groups\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setEnvironmentVariable(\"API_KEYS_ID\", jsonData.id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}"
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"displayName\": \"apiKey1\",\n\t\"scopes\": [\"ALL\"]\n}"
								},
								"url": {
									"raw": "http://{{HOST}}/v1/user/apiKeys",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"v1",
										"user",
										"apiKeys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invite User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful create ip groups\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setEnvironmentVariable(\"API_KEYS_ID\", jsonData.id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}"
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"useremail_04@nal.vn\",\n\t\"userType\": \"user\"\n}"
								},
								"url": {
									"raw": "http://{{HOST}}/v1/invitations",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"v1",
										"invitations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get List Invitations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful create ip groups\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setEnvironmentVariable(\"API_KEYS_ID\", jsonData.id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}"
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"useremail_02@nal.vn\",\n\t\"userType\": \"user\"\n}"
								},
								"url": {
									"raw": "http://{{HOST}}/v1/invitations",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"v1",
										"invitations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Accept Invitation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful create ip groups\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setEnvironmentVariable(\"API_KEYS_ID\", jsonData.id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "apikey",
										"value": "{{SPIRALG_SYS_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "http://{{HOST}}/sys/v1/users/{{USER_ID}}/invitations/2/join",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"sys",
										"v1",
										"users",
										"{{USER_ID}}",
										"invitations",
										"2",
										"join"
									]
								}
							},
							"response": []
						},
						{
							"name": "find ipGroups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account already exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    var exist = false;",
											"    for (var index in jsonData.items) {",
											"        if (jsonData.items[index][\"displayName\"] == postman.getEnvironmentVariable(\"IP_GROUPS_DISPLAY_NAME\")) {",
											"            postman.setEnvironmentVariable(\"IP_GROUPS_ID\", jsonData.items[index][\"id\"]);",
											"            exist = true;",
											"            break;",
											"        }",
											"    }",
											"    pm.expect(exist).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}"
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}"
									}
								],
								"url": {
									"raw": "http://{{HOST}}/v1/ipGroups",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"v1",
										"ipGroups"
									]
								}
							},
							"response": []
						},
						{
							"name": "create ipGroups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful create ip groups\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setEnvironmentVariable(\"IP_GROUPS_ID\", jsonData.id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}"
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"displayName\": \"{{IP_GROUPS_DISPLAY_NAME}}\",\n\t\"allowedIps\": [\n\t\t{\n\t\t\t\"ipAddress\": \"127.0.0.1\",\n\t\t\t\"comment\": \"localhost\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "http://{{HOST}}/v1/ipGroups",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"v1",
										"ipGroups"
									]
								}
							},
							"response": []
						},
						{
							"name": "update ipRestrictionApi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}"
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"enabled\": \"true\",\n\t\"allowedIps\": [\n\t\t{\n\t\t\t\"ipAddress\": \"127.0.0.1\",\n\t\t\t\"comment\": \"localhost\"\n\t\t}\n\t],\n\t\"allowedIpGroupIds\": [\"1\"]\n}"
								},
								"url": {
									"raw": "http://{{HOST}}/v1/ipRestrictionApi",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"v1",
										"ipRestrictionApi"
									]
								}
							},
							"response": []
						},
						{
							"name": "create bot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful create ip groups\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setEnvironmentVariable(\"BOT_ID\", jsonData.id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}"
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"displayName\": \"bot1\",\n\t\"name\": \"bot1\"\n}"
								},
								"url": {
									"raw": "http://{{HOST}}/v1/bots",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"v1",
										"bots"
									]
								}
							},
							"response": []
						},
						{
							"name": "regenerate apiKeys",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful create ip groups\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"    var jsonData = JSON.parse(responseBody);",
											"    postman.setEnvironmentVariable(\"API_KEYS_ID\", jsonData.id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}"
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"displayName\": \"apiKey1\",\n\t\"scopes\": [\"ALL\"]\n}"
								},
								"url": {
									"raw": "http://{{HOST}}/v1/user/apiKeys/{{API_KEYS_ID}}/regenerate",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"v1",
										"user",
										"apiKeys",
										"{{API_KEYS_ID}}",
										"regenerate"
									]
								}
							},
							"response": []
						},
						{
							"name": "update ipGroups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									},
									{
										"key": "X-Spiral-App-Role",
										"type": "text",
										"value": "{{APP_ROLE_NAME}}"
									},
									{
										"key": "X-Spiral-App-Authority",
										"type": "text",
										"value": "{{APP_AUTHORITY_NAME}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"displayName\": \"{{IP_GROUPS_DISPLAY_NAME}}\",\n\t\"allowedIps\": [\n\t\t{\n\t\t\t\"ipAddress\": \"127.0.0.1\",\n\t\t\t\"comment\": \"localhost\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "http://{{HOST}}/v1/ipGroups/{{IP_GROUPS_ID}}",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"v1",
										"ipGroups",
										"{{IP_GROUPS_ID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Contents_Service",
			"item": [
				{
					"name": "Find User and store ID to env Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/sys/v1/testEnvironments",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"testEnvironments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SYS",
			"item": [
				{
					"name": "Find app dbs id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}",
								"disabled": true
							},
							{
								"key": "apikey",
								"type": "text",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/sys/v1/apps/{{APP_ID}}/dbs/{{DB_ID}}?enableUsage=true",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"apps",
								"{{APP_ID}}",
								"dbs",
								"{{DB_ID}}"
							],
							"query": [
								{
									"key": "enableUsage",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find express email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}",
								"disabled": true
							},
							{
								"key": "apikey",
								"type": "text",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/sys/v1/express/email/8?accountId={{ACCOUNT_ID}}",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"express",
								"email",
								"8"
							],
							"query": [
								{
									"key": "accountId",
									"value": "{{ACCOUNT_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find app usages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}",
								"disabled": true
							},
							{
								"key": "apikey",
								"type": "text",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/sys/v1/apps/{{APP_ID}}",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"apps",
								"{{APP_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find app usages current storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}",
								"disabled": true
							},
							{
								"key": "apikey",
								"type": "text",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/sys/v1/usages/current/storage?accountId={{ACCOUNT_ID}}",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"usages",
								"current",
								"storage"
							],
							"query": [
								{
									"key": "accountId",
									"value": "{{ACCOUNT_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find app dbs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Role",
								"type": "text",
								"value": "{{APP_ROLE_NAME}}",
								"disabled": true
							},
							{
								"key": "X-Spiral-App-Authority",
								"type": "text",
								"value": "{{APP_AUTHORITY_NAME}}",
								"disabled": true
							},
							{
								"key": "apikey",
								"type": "text",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/sys/v1/apps/{{APP_ID}}/dbs?enableUsage=true",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"apps",
								"{{APP_ID}}",
								"dbs"
							],
							"query": [
								{
									"key": "enableUsage",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify domain service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"url": {
							"raw": "http://{{HOST}}/sys/v1/emailFromDomains/updateStatusToVerified/{{EMAIL_FROM_DOMAIN_ID}}",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"emailFromDomains",
								"updateStatusToVerified",
								"{{EMAIL_FROM_DOMAIN_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"_account\": \"{{ACCOUNT_ID}}\",\n      \"_operationSource\": \"1\",\n      \"_operator\": {\n      \t\"userId\": \"{{USER_ID}}\"\n      }\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/sys/v1/dbs/{{TEST_DB_ID}}/records/1",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "create spiralSelector",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"dateOfSelector\": \"20200622\"\n}"
						},
						"url": {
							"raw": "http://{{HOST}}/sys/v1/emailFromDomains/spiralSelector/prepare",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"emailFromDomains",
								"spiralSelector",
								"prepare"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{SPIRALG_SYS_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"_account\": \"{{ACCOUNT_ID}}\",\n      \"_operationSource\": \"1\",\n      \"_operator\": {\n      \t\"userId\": \"{{USER_ID}}\"\n      },\n      \"_owner\": {\n      \t\"dbId\":\"{{TEST_DB_ID}}\",\n      \t\"recordId\": \"1\"\n      },\n      \"id\": \"2\",\n      \"name\": \"Customer2\",\n      \"bla_text\": \"bla bla\",\n      \"email\": \"cust2@gmail.com\",\n      \"phone\": \"+81355756601\",\n      \"workEmail\": \"cust2@work.com\",\n      \"birth_day\": \"1990-01-01\",\n      \"last_access\": \"2017-12-30T12:15:30Z\",\n      \"most_active_month\": \"12-30\",\n      \"most_active_time\": \"12:15:30\",\n      \"married\": \"0\",\n      \"favorite_singers\":[\"0\",\"1\"] \n}"
						},
						"url": {
							"raw": "http://{{HOST}}/sys/v1/dbs/{{TEST_DB_ID}}/records",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"sys",
								"v1",
								"dbs",
								"{{TEST_DB_ID}}",
								"records"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Kong",
			"item": [
				{
					"name": "oauth2_tokens",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://0.0.0.0:8001/oauth2_tokens",
							"protocol": "http",
							"host": [
								"0",
								"0",
								"0",
								"0"
							],
							"port": "8001",
							"path": [
								"oauth2_tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "routes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://0.0.0.0:8001/routes/accountUserApi.dbNodeService",
							"protocol": "http",
							"host": [
								"0",
								"0",
								"0",
								"0"
							],
							"port": "8001",
							"path": [
								"routes",
								"accountUserApi.dbNodeService"
							]
						}
					},
					"response": []
				},
				{
					"name": "oauth2 Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://0.0.0.0:8001/oauth2?client_id=hogehoge_{{USER_ID}}",
							"protocol": "http",
							"host": [
								"0",
								"0",
								"0",
								"0"
							],
							"port": "8001",
							"path": [
								"oauth2"
							],
							"query": [
								{
									"key": "client_id",
									"value": "hogehoge_{{USER_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create consumer user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{USER_ID}}\"\n}"
						},
						"url": {
							"raw": "http://0.0.0.0:8001/consumers",
							"protocol": "http",
							"host": [
								"0",
								"0",
								"0",
								"0"
							],
							"port": "8001",
							"path": [
								"consumers"
							]
						}
					},
					"response": []
				},
				{
					"name": "consumer oauth2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://0.0.0.0:8001/consumers/{{USER_ID}}/oauth2",
							"protocol": "http",
							"host": [
								"0",
								"0",
								"0",
								"0"
							],
							"port": "8001",
							"path": [
								"consumers",
								"{{USER_ID}}",
								"oauth2"
							]
						}
					},
					"response": []
				},
				{
					"name": "create consumer oauth2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"bff\",\n    \"client_id\": \"hogehoge_{{USER_ID}}\",\n    \"client_secret\": \"fugafuga_{{USER_ID}}\",\n    \"redirect_uris\": [\"https://www.pi-pe.co.jp\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://0.0.0.0:8001/consumers/{{USER_ID}}/oauth2",
							"protocol": "http",
							"host": [
								"0",
								"0",
								"0",
								"0"
							],
							"port": "8001",
							"path": [
								"consumers",
								"{{USER_ID}}",
								"oauth2"
							]
						}
					},
					"response": []
				},
				{
					"name": "routes Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://0.0.0.0:8001/routes/spiralg.userapi/plugins",
							"protocol": "http",
							"host": [
								"0",
								"0",
								"0",
								"0"
							],
							"port": "8001",
							"path": [
								"routes",
								"spiralg.userapi",
								"plugins"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get file sizes",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{TOOL_HOST}}/request/1302/fileSizes",
					"protocol": "http",
					"host": [
						"{{TOOL_HOST}}"
					],
					"path": [
						"request",
						"1302",
						"fileSizes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get file sizes of rados file",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "Get file sizes of rados file",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{TOOL_HOST}}/radosgw/fileSize?accountId=63&requestId=1302&fileCount=1",
					"protocol": "http",
					"host": [
						"{{TOOL_HOST}}"
					],
					"path": [
						"radosgw",
						"fileSize"
					],
					"query": [
						{
							"key": "accountId",
							"value": "63"
						},
						{
							"key": "requestId",
							"value": "1302"
						},
						{
							"key": "fileCount",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get list Object",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		}
	]
}